#ifndef LOSE
#define LOSE

#define RESET_PIN 15

const char loseBoard[32][32] = {
 {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},  // 0
 {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},  // 1
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 2
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 3
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 4
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 5
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 6 
 {'#', '#', '-', '-', '-', '-', '+','-', '-', '-', '-', '-', '+', '-', '-', '-', '+', '-', '-', '-', '-','+', '-', '-', '-', '+', '-', '-', '-', '-', '#', '#'},  // 7
 {'#', '#', '-', '-', '-', '-', '-','+', '-', '-', '-', '+', '-', '-', '-', '+', '+', '+', '-', '-', '-','+', '-', '-', '-', '+', '-', '-', '-', '-', '#', '#'},  // 8
 {'#', '#', '-', '-', '-', '-', '-','-', '+', '-', '+', '-', '-', '-', '+', '+', '+', '+', '+', '-', '-','+', '-', '-', '-', '+', '-', '-', '-', '-', '#', '#'},  // 9
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '+', '-', '-', '-', '-', '+', '+', '+', '+', '+', '-', '-','+', '-', '-', '-', '+', '-', '-', '-', '-', '#', '#'},  // 10
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '+', '-', '-', '-', '-', '+', '+', '+', '+', '+', '-', '-','+', '-', '-', '-', '+', '-', '-', '-', '-', '#', '#'},  // 11
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '+', '-', '-', '-', '-', '-', '+', '+', '+', '-', '-', '-','-', '+', '-', '+', '-', '-', '-', '-', '-', '#', '#'},  // 12
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '+', '-', '-', '-', '-', '-', '-', '+', '-', '-', '-', '-','-', '-', '+', '-', '-', '-', '-', '-', '-', '#', '#'},  // 13
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 14
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 15
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 16
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 17
 {'#', '#', '-', '-', '-', '-', '-','+', '-', '-', '-', '-', '-', '-', '+', '+', '-', '-', '-', '-', '+','+', '-', '-', '+', '+', '+', '-', '-', '-', '#', '#'},  // 18
 {'#', '#', '-', '-', '-', '-', '-','+', '-', '-', '-', '-', '-', '+', '+', '+', '+', '-', '-', '+', '-','-', '+', '-', '+', '-', '-', '-', '-', '-', '#', '#'},  // 19
 {'#', '#', '-', '-', '-', '-', '-','+', '-', '-', '-', '-', '+', '+', '+', '+', '+', '+', '-', '-', '+','+', '-', '-', '+', '-', '-', '-', '-', '-', '#', '#'},  // 20
 {'#', '#', '-', '-', '-', '-', '-','+', '-', '-', '-', '-', '+', '+', '+', '+', '+', '+', '-', '-', '-','-', '+', '-', '+', '+', '-', '-', '-', '-', '#', '#'},  // 21
 {'#', '#', '-', '-', '-', '-', '-','+', '-', '-', '-', '-', '-', '+', '+', '+', '+', '-', '-', '-', '-','-', '+', '-', '+', '-', '-', '-', '-', '-', '#', '#'},  // 22
 {'#', '#', '-', '-', '-', '-', '-','+', '+', '+', '+', '-', '-', '-', '+', '+', '-', '-', '-', '+', '-','-', '+', '-', '+', '-', '-', '-', '-', '-', '#', '#'},  // 23
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '+','+', '-', '-', '+', '+', '+', '-', '-', '-', '#', '#'},  // 24
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 25
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 26
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 27
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 28
 {'#', '#', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-', '-','-', '-', '-', '-', '-', '-', '-', '-', '-', '#', '#'},  // 29
 {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},  // 30
 {'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},  // 31
};

/* Converts the string to a the corresponding character based on the color scheme decided. */
char stringToByte(char inputChar)
{
	char result;
	switch(inputChar) {
		case '#': 
			result = 0x01; // WALL: 0000_0111
			break;
		case '-':
			result = 0x00; // IDK: 0000_0000
			break;
		case '+':
			result = 0x07; // TEXT: 0000_0100
			break;
	}
	return result;
}

/* Sends the lose screen to the LED. The logic is the same as the one in LEDToByte */
void sendLoseScreen()
{
	pioDigitalWrite(RESET_PIN, 1);
	pioDigitalWrite(RESET_PIN, 0);
	int i,j; 
	for (i = 0; i < 16; ++i){
		for (j = 0; j < 35; ++j){
			
			char result;
			if(j>=32){
				 result= 0x00;
			}
			else{
			 char top = stringToByte(loseBoard[i][j]);
			 char bot = stringToByte(loseBoard[i+16][j]);
			 result = (top<<3) | bot;
			}
			spiSend(result);
		 
		}
	}		

}

#endif
